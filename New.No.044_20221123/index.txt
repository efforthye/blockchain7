# Router에 대해서
- Router : 경로, 서버 내에서의 폴더 경로
-   이 폴더 경로로 들어가면 index.html이 있기 때문에 
-   해당 파일을 가져와 브라우저에 웹 페이지를 출력했었다.
- React에서도 Router를 사용할 수 있다.
- React의 Router은 Front
- React는 Front인데 Router는 Back이지 않은가? 맞다.
-   React(서버)에서 브라우저를 속인다고 한다.
-   ex) /로 라우터를 나누는 것 : 원래는 서버에서 해당 폴더로 이동 or API값을 반환함
-   근데 React가 일단 그걸 다 가져다가 사용한다고 한다.
-   lacalhost:3000 자체까지만 서버쪽에서 담당하고, '/' 이후로는 React에서 사용한다.(중요)
-   HTML파일 하나로 여러 HTML파일을 사용하는 것처럼 보여줄 수 있다.
- MPA : Multiple Page Application, 여러 페이지를 사용하여 웹 페이지를 서비스한다.(지금까지 우리가 사용한 방식)
-   MPA의 장점은 하나의 페이지를 이동할 때 빠르다는 것이다. (속도가 일정하다.)
-   MPA의 단점은 화면 새로고침시 깜빡이며, 자바스크립트 로딩이 완료되어야 제대로 기능한다.
- SPA(중요) : Single Page Application, 하나의 페이지를 사용해서 웹 페이지를 서비스한다.(중요)
-   React는 전형적인 SPA제작 라이브러리이다. 페이지가 부드럽게 바뀌는 장점이 있다.
-   React를 사용하면 App까지 개발이 가능하다고 한다. 이 것을 React native 라이브러리라고 한다.(중요)
-   SPA의 장점 : 새로고침을 하지 않는다(깜빡이지 않음), 
-   SPA의 단점 : 홈페이지 진입 시 오래 걸리다. 진입 후에는 빠름
- CSR : Client Side Rendering, 브라우저 등 클라이언트 쪽에서 코드를 완성시킨다.
-   지금까지 우리가 사용한 방식이라고 한다.
-   CSR의 장점은 서버의 부하가 적다는 것이다. 단점은 클라이언트 성능에 따라서 사용자 경험(UX)가 좋지못할수 있다.
- SSR : Server Side Rendering, 
-   현재까지는 수업에서 안 나갔다고 한다.
-   Templete 엔진 이라는 기능을 사용해야 하는데, 현재 협업에서는 이 기능을 아예 사용하지 않는다고 한다.
-   또한 문법과 파일 위치 등이 완전히 달라진다고 한다. 그래서 사용 안 하는 듯
-   고우석님이 사용한 html header, footer 불러오는 방식이 SSR과 가장 유사하다고 한다. 
-   SSR의 장점 : 클라이언트 성능에 관계없이 같은 속도의 웹 페이지를 서비스할 수 있다.
-   SSR의 단점 : 사용자가 많아지면 서버가 터진다고 한다.
